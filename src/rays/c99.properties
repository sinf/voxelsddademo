# Define SciTE settings for C (which has MUCH less keywords than other "C-like" languages)

file.patterns.c99=*.c;*.cc;*.h;*.hh

shbang.tcc=c99
shbang.tinycc=c99

filter.c99=C99 (c cc h hh)|$(file.patterns.c99)|

lexer.$(file.patterns.c99)=cpp

keywordclass.c99=auto break case char const continue default do double else enum extern float for goto if inline int long register restrict return short signed sizeof static struct switch typedef union unsigned void volatile while _Bool _Complex _Imaginary _Pragma

keywords.$(file.patterns.c99)=$(keywordclass.c99)

# keywords2 is for highlighting user defined keywords or function calls or similar
#keywords2.$(file.patterns.cpp)=file

# keywords5 is for preprocessor definitions and will cause inactive code
# to be greyed out. This setting is a space separated list of definitions
# where a definition may be of the form NAME=VALUE or simply NAME.
#keywords5.$(file.patterns.cpp)=_MSC_VER SCI_NAMESPACE GTK_MAJOR_VERSION=2

word.chars.cxx=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.c99)=$(word.chars.cxx)
calltip.c99.word.characters=$(chars.alpha)$(chars.numeric)_
comment.block.c99=//~
#comment.block.at.line.start.c99=1
comment.stream.start.c99=/*
comment.stream.end.c99=*/
comment.box.start.c99=/*
comment.box.middle.c99= *
comment.box.end.c99= */

# Folding
#fold.cpp.syntax.based=0
#fold.cpp.comment.multiline=0
#fold.cpp.comment.explicit=0
#defaults for fold.cpp.explicit.start=//{ and fold.cpp.explicit.end=//}
#  can be replaced by defining custom strings, e.g. //[ and //]
#fold.cpp.explicit.start=//[
#fold.cpp.explicit.end=//]
#if fold strings are set to something like /*{{{ and /*}}} (Origami/WinF style fold strings), enable
#  fold.cpp.explicit.anywhere, allowing explicit fold points being anywhere, not just in line comments
#fold.cpp.explicit.anywhere=1
#fold.at.else=1

statement.indent.$(file.patterns.c99)=5 case default do else for if while
statement.end.$(file.patterns.c99)=10 ;
statement.lookback.$(file.patterns.c99)=20
block.start.$(file.patterns.c99)=10 {
block.end.$(file.patterns.c99)=10 }

#autocomplete.cpp.fillups=(

#styling.within.preprocessor=1
preprocessor.symbol.$(file.patterns.c99)=#
preprocessor.start.$(file.patterns.c99)=if ifdef ifndef
preprocessor.middle.$(file.patterns.c99)=else elif
preprocessor.end.$(file.patterns.c99)=endif

#lexer.cpp.track.preprocessor=1
#lexer.cpp.update.preprocessor=1
#lexer.cpp.hashquoted.strings=1

# C++ styles

# Default
style.c99.32=$(font.base)
# White space
style.c99.0=fore:#808080
# Comment: /* */.
style.c99.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment: //.
style.c99.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment: block comments beginning with /** or /*!
style.c99.3=$(colour.code.comment.doc),$(font.code.comment.doc)
# Number
style.c99.4=$(colour.number)
# Keyword
style.c99.5=$(colour.keyword),bold
# Double quoted string
style.c99.6=$(colour.string)
# Single quoted string
style.c99.7=$(colour.char)
# UUIDs (only in IDL)
style.c99.8=fore:#804080
# Preprocessor
style.c99.9=$(colour.preproc)
# Operators
style.c99.10=$(colour.operator),bold
# Identifiers
style.c99.11=
# End of line where string is not closed
style.c99.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Verbatim strings for C#
style.c99.13=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
style.c99.14=fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
# Doc Comment Line: line comments beginning with /// or //!.
style.c99.15=$(colour.code.comment.doc),$(font.code.comment.doc)
# Keywords2
style.c99.16=fore:#B00040
# Comment keyword
style.c99.17=fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
style.c99.18=fore:#804020,$(font.code.comment.doc)
# Raw strings for C++0x
style.c99.20=$(colour.string),back:#FFF3FF,eolfilled
# Triple-quoted strings for Vala
style.c99.21=$(font.monospace),fore:#007F00,back:#E0FFE0,eolfilled
# Hash-quoted strings for Pike
style.c99.22=$(font.monospace),fore:#007F00,back:#E7FFD7,eolfilled

# Inactive states are 64 greater than their active counterparts

# White space
style.c99.64=fore:#C0C0C0
# Comment: /* */.
style.c99.65=$(style.c99.1),fore:#90B090
# Line Comment: //.
style.c99.66=$(style.c99.2),fore:#90B090
# Doc comment: block comments beginning with /** or /*!
style.c99.67=$(style.c99.3),fore:#D0D0D0
# Number
style.c99.68=$(style.c99.4),fore:#90B0B0
# Keyword
style.c99.69=$(style.c99.5),fore:#9090B0
# Double quoted string
style.c99.70=$(style.c99.6),fore:#B090B0
# Single quoted string
style.c99.71=$(style.c99.7),fore:#B090B0
# UUIDs (only in IDL)
style.c99.72=$(style.c99.8),fore:#C0C0C0
# Preprocessor
style.c99.73=$(style.c99.9),fore:#B0B090
# Operators
style.c99.74=$(style.c99.10),fore:#B0B0B0
# Identifiers
style.c99.75=$(style.c99.11),fore:#B0B0B0
# End of line where string is not closed
style.c99.76=$(style.c99.12),fore:#000000
# Verbatim strings for C#
style.c99.77=$(style.c99.13),fore:#90B090
# Regular expressions for JavaScript
style.c99.78=$(style.c99.14),fore:#7FAF7F
# Doc Comment Line: line comments beginning with /// or //!.
style.c99.79=$(style.c99.15),fore:#C0C0C0
# Keywords2
style.c99.80=$(style.c99.16),fore:#C0C0C0
# Comment keyword
style.c99.81=$(style.c99.17),fore:#C0C0C0
# Comment keyword error
style.c99.82=$(style.c99.18),fore:#C0C0C0
# Raw strings for C++0x
style.c99.84=$(style.c99.20),fore:#B090B0
# Triple-quoted strings for Vala
style.c99.85=$(style.c99.21),fore:#90B090
# Hash-quoted strings for Pike
style.c99.86=$(style.c99.22),fore:#90B090

# Braces are only matched in operator style
braces.c99.style=10
